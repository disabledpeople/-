import os
import json
import logging
import colorlog
import requests
import time
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from telebot import TeleBot, types
from requests.exceptions import ConnectionError, Timeout, RequestException, HTTPError
import time
from conf import TG_BOT_TOKEN, TG_CHAT_IDS, log_colors, holiday_ranges
from commands import send_homework_command, send_ege_schedule, send_holiday_on_command, \
    send_boost_info, find_duty

# Setup logger with maximum  details
formatter = colorlog.ColoredFormatter(
    '%(log_color)s%(asctime)s - %(levelname)s - %(message)s',
    log_colors=log_colors)
handler = logging.StreamHandler()
handler.setFormatter(formatter)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('homework_bot.log', encoding='utf-8'),
        handler
    ])

# Initialize bot
bot = TeleBot(TG_BOT_TOKEN)




# Paths to JSON files
USERS_FILE = 'json/users.json'
SCHEDULE_FILE = 'json/schedule2.json'
DEJUR_FILE = 'json/dejur.json'

# Load JSON data
def load_json(file_path):
    logging.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            logging.debug(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {data}")
            return data
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return {}
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return {}

# Save JSON data
def save_json(data, file_path):
    logging.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª: {file_path}")
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
            logging.debug("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {file_path}: {e}")

# Load users
def load_users():
    logging.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    users = load_json(USERS_FILE)
    logging.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
    return users

# Save users
def save_users(users):
    logging.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")
    save_json(users, USERS_FILE)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
def show_navigation_buttons(chat_id):
    logging.debug(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}")
    commands_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    commands_markup.add(
        'üèñ –ö–∞–Ω–∏–∫—É–ª—ã',
        'üçΩÔ∏è –ß—Ç–æ –¥–∞—é—Ç?',
        'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –û–ì–≠',
        'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠',
        'üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é',
        'üöÄ Boost'
    )

    users = load_users()
    if chat_id in users and users[chat_id].get('class') == '11':
        commands_markup.add(
            'üìû –í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)',
            'üìù –î–µ–∂—É—Ä–Ω—ãe (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)'
        )

    bot.send_message(chat_id, "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=commands_markup)
    logging.debug("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /menu
@bot.message_handler(commands=['start'])
def start_command(message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}".format(message.from_user.id))

    chat_id = str(message.chat.id)
    users = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –∫–ª–∞—Å—Å
    if chat_id in users:
        user_class = users[chat_id].get('class')
        if user_class:
            bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: {user_class}.")
            show_navigation_buttons(chat_id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∫–ª–∞—Å—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω
    else:
        users[chat_id] = {}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")

    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item8 = types.KeyboardButton("8")
    item9 = types.KeyboardButton("9")
    item10 = types.KeyboardButton("10")
    item11 = types.KeyboardButton("11")
    markup.add(item8, item9, item10, item11)
    bot.send_message(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
@bot.message_handler(func=lambda message: message.text in ["8", "9", "10", "11"])
def class_selection(message):
    selected_class = message.text  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å {selected_class}")

    chat_id = str(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º chat_id
    users = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[chat_id] = {'class': selected_class}
    save_users(users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: {selected_class}")
    show_navigation_buttons(chat_id)

# Get schedule
def get_schedule(chat_id, day):
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–∞ –¥–µ–Ω—å {day}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_users()
    user_info = users.get(str(chat_id), {})
    user_class = user_info.get('class', 'unknown')

    logging.debug(f"–ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {user_class}")

    if user_class == 'unknown':
        logging.warning(f"–ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return "–í–∞—à –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å –∫–ª—é—á–∞–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    days_mapping = {
        'monday': 'Monday',
        'tuesday': 'Tuesday',
        'wednesday': 'Wednesday',
        'thursday': 'Thursday',
        'friday': 'Friday',
        'saturday': 'Saturday',
        'sunday': 'Sunday'
    }

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–Ω—è –∫ —Ñ–æ—Ä–º–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    day = day.lower()
    if day not in days_mapping:
        logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")
        return "–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏."

    day_key = days_mapping[day]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_data = load_json(SCHEDULE_FILE)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ –∏ –¥–Ω—è
    if user_class in schedule_data:
        daily_schedule = schedule_data[user_class].get(day_key, [])

        if not daily_schedule:
            return "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —É—Ä–æ–∫–æ–≤."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = []
        for lesson in daily_schedule:
            response.append(f"{lesson['time']}: {lesson['subject']} (–£—á–∏—Ç–µ–ª—å: {lesson['teacher']})")

        logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {response}")
        return '\n'.join(response)

    return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

# Handle schedule requests
@bot.message_handler(func=lambda message: message.text in ['üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é'])
def handle_schedule_request(message):
    chat_id = str(message.chat.id)
    today = datetime.now().strftime('%A').lower()
    logging.info(f"–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–∞ –¥–µ–Ω—å {today}")

    if message.text == 'üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        if today in ['saturday', 'sunday']:
            today = 'monday'
        schedule = get_schedule(chat_id, today)
        bot.send_message(chat_id, schedule)

    elif message.text == 'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%A').lower()
        if tomorrow in ['saturday', 'sunday']:
            tomorrow = 'monday'
        schedule = get_schedule(chat_id, tomorrow)
        bot.send_message(chat_id, schedule)

    elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é':
        week_schedule = []
        for day in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']:
            schedule = get_schedule(chat_id, day)
            week_schedule.append(f"{day.capitalize()}:\n{schedule}")
        bot.send_message(chat_id, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n" + "\n\n".join(week_schedule))

# Send PDFs from folder
def send_pdfs_from_folder(bot, chat_id):
    logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ PDF-—Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    folder_path = 'book'  # Specify the correct folder path
    pdf_files = [f for f in os.listdir(folder_path) if f.endswith('.pdf')]

    if not pdf_files:
        logging.error("–í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç PDF")
        return

    try:
        bot.send_chat_action(chat_id, 'upload_document')
        for pdf_file in pdf_files:
            file_path = os.path.join(folder_path, pdf_file)
            with open(file_path, 'rb') as f:
                bot.send_document(chat_id, f, caption=pdf_file)
        logging.info("PDF-—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF-—Ñ–∞–π–ª–æ–≤: {e}")

# Find duty by day
def find_duty_by_day():
    duty_data = load_json(DEJUR_FILE)
    current_weekday = datetime.now().strftime('%A')  # Get current weekday as a string, e.g., "Monday"
    for duty in duty_data:
        if duty['day'] == current_weekday:
            logging.debug(f"–ù–∞–π–¥–µ–Ω—ã –¥–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ {current_weekday}: {duty['duty']}")
            return duty['duty']
    logging.warning("–î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return ["–î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"]

# Send today food menu
def send_today_food_menu(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    url = 'https://livint.ru/food'
    response = requests.get(url)
    if response.status_code == 200:
        logging.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é –±–ª—é–¥")
        soup = BeautifulSoup(response.text, 'html.parser')
        today_date = datetime.now().strftime('%d.%m')
        found = False
        links = soup.find_all('a', href=True)
        for link in links:
            href = link['href']
            if href.endswith('.pdf') and today_date in link.text:
                found = True
                file_url = href
                file_name = link.text.strip().split('(')[0].strip() + ".pdf"
                file_path = os.path.join('archive', file_name)

                if not os.path.exists('archive'):
                    os.makedirs('archive')

                if not os.path.exists(file_path):
                    pdf_response = requests.get(file_url)
                    if pdf_response.status_code == 200:
                        logging.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω PDF-—Ñ–∞–π–ª: {file_name}")
                        with open(file_path, 'wb') as f:
                            f.write(pdf_response.content)
                        logging.info(f"–°–æ—Ö—Ä–∞–Ω–∏–ª PDF-—Ñ–∞–π–ª: {file_name} –≤ –ø–∞–ø–∫—É 'archive'")
                    else:
                        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF-—Ñ–∞–π–ª")
                        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—é.")

                with open(file_path, 'rb') as f:
                    bot.send_chat_action(message.chat.id, 'upload_document')
                    bot.send_document(message.chat.id, f)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª PDF-—Ñ–∞–π–ª: {file_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}")
        if not found:
            logging.warning("–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            bot.send_message(message.chat.id, "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ–Ω—é –±–ª—é–¥.")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ–Ω—é.")

# Get EGE schedule message
EGE_SCHEDULE = {
    "23 –º–∞—è": ["–ò—Å—Ç–æ—Ä–∏—è", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–•–∏–º–∏—è"],
    "27 –º–∞—è": ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–±–∞–∑–æ–≤–∞—è)", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)"],
    "30 –º–∞—è": ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"],
    "2 –∏—é–Ω—è": ["–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–§–∏–∑–∏–∫–∞"],
    "5 –∏—é–Ω—è": ["–ë–∏–æ–ª–æ–≥–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å)"],
    "10 –∏—é–Ω—è": ["–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"],
    "11 –∏—é–Ω—è": ["–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (—É—Å—Ç–Ω–∞—è —á–∞—Å—Ç—å)"]
}

def get_ege_schedule_message():
    message = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠:\n\n"
    for date, subjects in EGE_SCHEDULE.items():
        message += f"{date}: {', '.join(subjects)}\n"
    return message

# Send OGE schedule
def send_oge_schedule(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /oge_schedule –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    oge_schedule = (
        "–û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥\n"
        "21 –º–∞—è ‚Äî –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π);\n"
        "22 –º–∞—è ‚Äî –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π);\n"
        "26 –º–∞—è ‚Äî –±–∏–æ–ª–æ–≥–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, —Ö–∏–º–∏—è;\n"
        "29 –º–∞—è ‚Äî –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –∏—Å—Ç–æ—Ä–∏—è, —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è;\n"
        "3 –∏—é–Ω—è ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞;\n"
        "6 –∏—é–Ω—è ‚Äî –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ;\n"
        "9 –∏—é–Ω—è ‚Äî —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫;\n"
        "16 –∏—é–Ω—è ‚Äî –±–∏–æ–ª–æ–≥–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, —Ñ–∏–∑–∏–∫–∞.\n\n"
        "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–Ω–∏\n"
        "26 –∏—é–Ω—è ‚Äî —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫;\n"
        "27 –∏—é–Ω—è ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º (–∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏);\n"
        "28 –∏—é–Ω—è ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º (–∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏);\n"
        "30 –∏—é–Ω—è ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞;\n"
        "1 –∏—é–ª—è ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º;\n"
        "2 –∏—é–ª—è ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º."
    )
    bot.send_message(message.chat.id, oge_schedule)

# Notify about holidays
def check_holidays(bot):
    now = datetime.now()
    today = now.date()
    logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–∞ {today}")
    for start, end in holiday_ranges:
        if today == start.date():
            notify_holiday_start(bot, start)
        elif today == end.date() + timedelta(days=1):  # day after holiday ends
            notify_holiday_end(bot, end)

def notify_holiday_start(bot, start):
    message = f"–ö–∞–Ω–∏–∫—É–ª—ã –Ω–∞—á–∞–ª–∏—Å—å! –° {start.strftime('%d.%m.%Y')} –¥–æ {start + timedelta(days=1)}"
    for chat_id in TG_CHAT_IDS:
        bot.send_message(chat_id, message)
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∫–∞–Ω–∏–∫—É–ª: {message}")

def notify_holiday_end(bot, end):
    message = f"–ö–∞–Ω–∏–∫—É–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –° {end.strftime('%d.%m.%Y')} –¥–æ {end + timedelta(days=1)}"
    for chat_id in TG_CHAT_IDS:
        bot.send_message(chat_id, message)
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–Ω–∏–∫—É–ª: {message}")

def schedule_holiday_notifications(bot):
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 0:
            check_holidays(bot)
        time.sleep(60)  # Check every 60 seconds

def send_important_numbers(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /important_numbers –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    if str(message.chat.id) in TG_CHAT_IDS:
        important_numbers = (
            "–í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n"
        )
        bot.send_message(message.chat.id, important_numbers)
        logging.debug(f"–í–∞–∂–Ω–æe —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞–∂–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['new'])
def announce_command(message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /new –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id == 5174606227:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞—à ID
        announcement_text = message.text[4:]  # –£–±–∏—Ä–∞–µ–º '/announce ' –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if announcement_text:
            user_ids = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logging.info(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {user_ids}")
            for chat_id in user_ids:
                try:
                    bot.send_message(chat_id=chat_id, text=announcement_text)
                    logging.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            bot.send_message(chat_id=message.chat.id, text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
        else:
            bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    else:
        bot.send_message(chat_id=message.chat.id, text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.message_handler(commands=['duty'])
def handle_duty(message):
    duty_message = find_duty_by_day()
    bot.send_message(message.chat.id, "\n".join(duty_message))
    logging.info(f"–î–µ–∂—É—Ä–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {message.text}")
    if message.text == 'üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        handle_schedule_request(message)
    elif message.text == 'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        handle_schedule_request(message)
    elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é':
        handle_schedule_request(message)
    elif message.text == 'üèñ –ö–∞–Ω–∏–∫—É–ª—ã':
        send_holiday_on_command(bot, message)
    elif message.text == 'üçΩÔ∏è –ß—Ç–æ –¥–∞—é—Ç?':
        send_today_food_menu(bot, message)
    elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠':
        send_ege_schedule(bot, message)
    elif message.text == 'üìû –í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        send_important_numbers(bot, message)
    elif message.text == 'üìù –î/–ó (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        send_homework_command(bot, message)
    elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –û–ì–≠':
        send_oge_schedule(bot, message)
    elif message.text == 'üöÄ Boost':
        send_boost_info(bot, message)
    elif message.text == 'üìù –î–µ–∂—É—Ä–Ω—ãe (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        find_duty(bot, message)
    elif message.text == 'duty':
        find_duty(bot, message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")
        show_navigation_buttons(message.chat.id)

MAX_RETRIES = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
retry_count = 0
        
# Main execution block
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –¥–æ–º–∞—à–Ω–µ–≥–æ –±–æ—Ç–∞...")
    try:
        logging.info("–ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–Ω–∏–∫—É–ª–∞—Ö...")
        import threading

        holiday_thread = threading.Thread(target=schedule_holiday_notifications, args=(bot,))
        holiday_thread.start()
        logging.info("–ü–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–Ω–∏–∫—É–ª–∞—Ö –∑–∞–ø—É—â–µ–Ω.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    try:
        logging.info("–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞...")
        while retry_count < MAX_RETRIES:
            try:
                bot.polling(none_stop=True)
                retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –±–æ—Ç–∞: {e}")
                retry_count += 1
                if retry_count < MAX_RETRIES:
                    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞... (–ø–æ–ø—ã—Ç–∫–∞ {retry_count})")
                    time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    retry_count = 0
                else:
                    logging.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
    except KeyboardInterrupt:
        logging.info("–û–ø—Ä–æ—Å –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
