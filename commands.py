from telebot import types
from datetime import datetime, timedelta

from test import find_schedule_by_teacher
from book import send_pdfs_from_folder
from holidays import get_holidays_info, is_holiday
from schedule import get_schedule
from food import send_today_food_menu
from ege_calendar import get_ege_schedule_message
from important_numbers import send_important_numbers  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from oge import send_oge_schedule
from conf import TG_CHAT_IDS
from dejurni import find_duty_by_day
import os
import json


import colorlog
import logging
from conf import log_colors
formatter = colorlog.ColoredFormatter(
    '%(log_color)s%(asctime)s - %(levelname)s - %(message)s',
    log_colors=log_colors)
handler = logging.StreamHandler()
handler.setFormatter(formatter)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('homework_bot.log', encoding='utf-8'),
        handler
    ])


def send_schedule_on_command(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /rasp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    today_day = datetime.now().strftime('%A').lower()
    bot.send_chat_action(message.chat.id, 'typing')
    get_schedule(bot, message, today_day)


def send_schedule_for_tomorrow_on_command(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /raspz –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    today = datetime.now().strftime('%A').lower()
    if today == 'friday':
        tomorrow_day = 'monday'
    if today == 'sunday':
        tomorrow_day = 'monday'
    if today == 'saturday':
        tomorrow_day = 'monday'
    else:
        tomorrow_day = (datetime.now() + timedelta(days=1)).strftime('%A').lower()
    bot.send_chat_action(message.chat.id, 'typing')
    get_schedule(bot, message, tomorrow_day)


def send_holiday_on_command(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /holiday –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    holidays_info = get_holidays_info()
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, holidays_info if holidays_info else "–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫–∞–Ω–∏–∫—É–ª.")

def classroom(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞–±–∏–Ω–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    classroom = find_schedule_by_teacher()
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, classroom)

def send_ege_schedule(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /ege –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    ege_schedule_message = get_ege_schedule_message()
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, ege_schedule_message)

def find_duty(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /duty –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    find_duty = find_duty_by_day()
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, find_duty)

def show_navigation_buttons(bot, message):
    logging.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    holiday_info = types.KeyboardButton('üèñ –ö–∞–Ω–∏–∫—É–ª—ã')
    food_today = types.KeyboardButton('üçΩÔ∏è –ß—Ç–æ –¥–∞—é—Ç?')
    oge_info = types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –û–ì–≠')
    ege_info = types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠')
    boost_command = types.KeyboardButton('üöÄ Boost')

    markup.add(holiday_info, food_today, oge_info, ege_info, boost_command)

    if str(message.chat.id) in TG_CHAT_IDS:
        rasp_today = types.KeyboardButton('üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)')
        rasp_tomorrow = types.KeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)')
        important_numbers = types.KeyboardButton('üìû –í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)')
        find_duty = types.KeyboardButton('üìù –î–µ–∂—É—Ä–Ω—ãe (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)')
        book = types.KeyboardButton('PDF –£—á–µ–±–Ω–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)')
        markup.add(rasp_today, rasp_tomorrow, important_numbers, find_duty, book)
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def handle_text(bot, message):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {message.text}")

    if message.text in ['üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)', 'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)', 'üìû –í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)', 'üìù –î/–ó (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)', '/rasp', '/raspz', '/important_numbers', '/homework']:
        if str(message.chat.id) not in TG_CHAT_IDS:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            logging.warning(f"Unauthorized access attempt by user {message.chat.id}")
            return

    if message.text == 'üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        send_schedule_on_command(bot, message)
    elif message.text == 'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        send_schedule_for_tomorrow_on_command(bot, message)
    elif message.text == 'üèñ –ö–∞–Ω–∏–∫—É–ª—ã':
        send_holiday_on_command(bot, message)
    elif message.text == 'üçΩÔ∏è –ß—Ç–æ –¥–∞—é—Ç?':
        send_today_food_menu(bot, message)
    elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠':
        send_ege_schedule(bot, message)
    elif message.text == 'üìû –í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        send_important_numbers(bot, message)
    elif message.text == 'üìù –î/–ó (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        send_homework_command(bot, message)
    elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –û–ì–≠':
        send_oge_schedule(bot, message)
    elif message.text == 'üöÄ Boost':
        send_boost_info(bot, message)
    elif message.text == 'üìù –î–µ–∂—É—Ä–Ω—ãe (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        find_duty(bot, message)
    elif message.text == 'PDF –£—á–µ–±–Ω–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è 11)':
        send_pdfs_from_folder(bot, message)
    elif message.text == '/books':
        send_pdfs_from_folder(bot, message)
    elif message.text == '/duty':
        find_duty(bot, message)
    elif message.text == '/boost':
        send_boost_info(bot, message)
    elif message.text == '/rasp':
        send_schedule_on_command(bot, message)
    elif message.text == '/raspz':
        send_schedule_for_tomorrow_on_command(bot, message)
    elif message.text == '/holiday':
        send_holiday_on_command(bot, message)
    elif message.text == '/food':
        send_today_food_menu(bot, message)
    elif message.text == '/ege':
        send_ege_schedule(bot, message)
    elif message.text == '/important_numbers':
        send_important_numbers(bot, message)
    elif message.text == '/homework':
        send_homework_command(bot, message)
    elif message.text == '/oge_schedule':
        send_oge_schedule(bot, message)
    else:
        teachers_data = load_teachers_data('json/teachers.json')
        result = find_teacher_by_subject(teachers_data, message.text.strip())
        bot.send_message(message.chat.id, result)

def send_boost_info(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /boost –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    boost_message = (
        "Ton - UQCeGJyRMbM8LhR0HkAy0iGdVaniUPW8ObCq3Yya0r05Z5IO\n"
    )
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, boost_message)

def load_teachers_data(file_name):
    with open(file_name, 'r', encoding='utf-8') as f:
        return json.load(f)

def find_teacher_by_subject(teachers_data, subject):
    for teacher in teachers_data:
        if subject in teacher['leson']:
            return f"–ò–º—è: {teacher['name']}"
    for leson in teachers_data:
        if subject in leson['name']:
            return f"–ü—Ä–µ–¥–º–µ—Ç {leson['leson']}"



# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ JSON
def get_homework_from_json():
    today = datetime.today().strftime('%Y-%m-%d')
    file_name = f"archive/homework_{today}.json"
    if os.path.exists(file_name):
        with open(file_name, 'r', encoding='utf-8') as f:
            homework = json.load(f)
            return homework
    else:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. (–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 14:30)   (–í—Ä–µ–º–µ–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç) (–ö–æ–≥–¥–∞ —Ç–æ —è –¥–æ–¥–µ–ª–∞—é —ç—Ç—É –º—Ä–∞–∑—å)"


def handle_message(message):
    teacher_name = message.text
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {teacher_name}")
    schedule = find_schedule_by_teacher(teacher_name)
    if schedule:
        response_text = '\n'.join(schedule)
    else:
        response_text = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"


def send_start_text(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    start_text = (
        "üåü –ë–æ—Ç @school_livint_bot: —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á—ë–±–µ! \n"
        "\n"
        "–ë–æ—Ç @school_livint_bot ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —É—Å–∏–ª–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏! üòâ\n"
    )
    bot.send_message(message.chat.id, start_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
def send_homework_command(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /homework –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    homework = get_homework_from_json()
    if isinstance(homework, list):
        homework_message = "\n".join(homework)
    else:
        homework_message = homework
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, homework_message)
